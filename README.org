* advent_of_code_2021

Repo for advent of code 2021 in clojure. I assumed that each day would build on
the previous but 3 days in and I'm realizing that wasn't the case. So for now
I'm putting code for each day in it's own ns with very little shared code
between.

Code is copied from previous days where useful instead of moving into a common
place, since I don't know when it might need to change in a way that would break
the answer for an earlier day.

In some cases (it's happened on day 2 already) the ask is to change the code in
task 2 that is required to get the correct answer for task 1, so occasionally
functions may get copied within a file as well.

For the most part there's a comment block at the bottom of each day that has
`tests` for the correct answers. I'm doing this instead of actual test
namespaces for simplicity, it might be worthwhile to move them all to actual
test files later... I'm writing this on day three, so who knows what will happen
by the end.

** Installation

Download from https://github.com/jgerman/advent_of_code_2021


** Days

It occurred to me after the fact that I should have kept notes on each day, this
is day 11, so I'll start there and maybe go back and add the rest.

*** Day 8

This solution is a mess, it worked but it took far too long, is hard to read,
fragile, and embarrassing. This is the result of trying to crank something out
after a long day of work and when I wasn't in the right mindset. Stepping away
from the machine would have been smart... rather than just bashing through step
by step.

Conceptually it's simple, given certain knowns you can find everything else.
Even though the execution time would take longer I feel like using core.logic
(or something similar), or implementing enough of it to just state the facts and
let the rules fire would be the cleanest way to solve the problem.

This is high on the list to come back and redo.


*** Day 11

This was pretty easy, I spent some time looking for a function in core.matrix to
give me all the locations that matched a predicate. I couldn't find it but I
can't imagine it doesn't exist.

For both tasks I just recurred over the steps and returned a map with the state
and whatever I needed to track, but I think this could be better handled by
using a lazy sequence. So when I go back to write it that's what I'll likely do.

*** Day 12

I played with Loom a little bit before deciding to just code it up and boy did I
make a mess when I first did it. So much so that task two caused me issues,
depspite it just being a simple logic check.

Some lessons learned:

- Sitting on the couch with a laptop watching football is not the ideal way to solve a puzzle.
- Stop getting cute with the problems.

As soon as I went downstairs away from distractions, I re-wrote the traversal
algorithm in a few minutes. I think there's still a few left over things that I
didn't clean up, but in the end I wound up starting over for task 2 and
refactoring task 1 to use that code.

I really made things hard to reason about by looking at the children and trying
to decide if they were worth considering, instead of looking at the current node
only and moving on.. .probably some sort of moral in that story...

Reminder for when I come back to it: The performance isn't great, I think that's
probably down to the mapcat in the recursion. I couldn't get it all in a single
list and I didn't want to fight with it, so that's a spot to revisit.

*** Day 13

Super easy, just map over the coords doing the transforms then plot out the points.

*** Day 14

Task 1 was easy, got the wrong answer before I realized I was still running it
on the sample rather than my actual input.

For Task 2 just following the rules won't do the trick, it'll take far too long
and probably blow out available memory.
